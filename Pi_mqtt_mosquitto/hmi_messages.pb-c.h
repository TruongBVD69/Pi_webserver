/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: hmi_messages.proto */

#ifndef PROTOBUF_C_hmi_5fmessages_2eproto__INCLUDED
#define PROTOBUF_C_hmi_5fmessages_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1000000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1004001 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Broker__ConnectionStatus Broker__ConnectionStatus;
typedef struct Broker__Error Broker__Error;
typedef struct Broker__RfidUid Broker__RfidUid;
typedef struct Broker__EvMac Broker__EvMac;
typedef struct Broker__ScreenIdCurrent Broker__ScreenIdCurrent;
typedef struct Broker__ScreenIdActive Broker__ScreenIdActive;
typedef struct Broker__ModuleStatus Broker__ModuleStatus;
typedef struct Broker__Account Broker__Account;
typedef struct Broker__BattPercent Broker__BattPercent;
typedef struct Broker__Temperature Broker__Temperature;
typedef struct Broker__Voltage Broker__Voltage;
typedef struct Broker__Current Broker__Current;
typedef struct Broker__RemainingTime Broker__RemainingTime;
typedef struct Broker__ChargingTime Broker__ChargingTime;
typedef struct Broker__ChargingPower Broker__ChargingPower;
typedef struct Broker__ChargingEnergy Broker__ChargingEnergy;
typedef struct Broker__ChargingCash Broker__ChargingCash;
typedef struct Broker__ActiveSocket Broker__ActiveSocket;
typedef struct Broker__HMIStatus Broker__HMIStatus;
typedef struct Broker__HmiErrorCodeData Broker__HmiErrorCodeData;
typedef struct Broker__AuthenResult Broker__AuthenResult;
typedef struct Broker__StateInfo Broker__StateInfo;
typedef struct Broker__CsmsFotaTrigger Broker__CsmsFotaTrigger;
typedef struct Broker__Post Broker__Post;
typedef struct Broker__Post__MAIN Broker__Post__MAIN;
typedef struct Broker__Post__PLCIMX Broker__Post__PLCIMX;
typedef struct Broker__Post__FAN Broker__Post__FAN;
typedef struct Broker__Post__IO Broker__Post__IO;
typedef struct Broker__Post__HV Broker__Post__HV;
typedef struct Broker__Post__RFID Broker__Post__RFID;
typedef struct Broker__Post__PLCXMC Broker__Post__PLCXMC;
typedef struct Broker__SystemOpMode Broker__SystemOpMode;
typedef struct Broker__FastChargeInfo Broker__FastChargeInfo;
typedef struct Broker__ChargingReport Broker__ChargingReport;
typedef struct Broker__GunError Broker__GunError;
typedef struct Broker__RecoverInfo Broker__RecoverInfo;


/* --- enums --- */

/*
 * Trạng thái màn hình
 */
typedef enum _Broker__ScreenStatus {
  BROKER__SCREEN_STATUS__UNKNOWN = 0,
  BROKER__SCREEN_STATUS__AVAILABLE = 1,
  BROKER__SCREEN_STATUS__UNAVAILABLE = 2,
  BROKER__SCREEN_STATUS__CHARGING = 3,
  BROKER__SCREEN_STATUS__FAULTED = 4,
  BROKER__SCREEN_STATUS__SUSPENDED_EV = 5,
  BROKER__SCREEN_STATUS__SUSPENDED_EVSE = 6,
  BROKER__SCREEN_STATUS__FINISHING = 7,
  BROKER__SCREEN_STATUS__RESERVATION = 8,
  BROKER__SCREEN_STATUS__UNPLUG = 9,
  BROKER__SCREEN_STATUS__RESET = 10,
  BROKER__SCREEN_STATUS__PREPARING = 11
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BROKER__SCREEN_STATUS)
} Broker__ScreenStatus;
typedef enum _Broker__PilotStates {
  BROKER__PILOT_STATES__kStateA = 0,
  BROKER__PILOT_STATES__kStateB = 1,
  BROKER__PILOT_STATES__kStateC = 2,
  BROKER__PILOT_STATES__kStateD = 3,
  BROKER__PILOT_STATES__kStateE = 4,
  BROKER__PILOT_STATES__kStateF = 5
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BROKER__PILOT_STATES)
} Broker__PilotStates;
typedef enum _Broker__StatusEnum {
  BROKER__STATUS_ENUM__OK = 0,
  BROKER__STATUS_ENUM__NG = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(BROKER__STATUS_ENUM)
} Broker__StatusEnum;

/* --- messages --- */

/*
 **
 * Connection status message, used for these following topics:
 * - kBrokerTopic_Hmi_Rfid_ConnectionStatus
 * - kBrokerTopic_Hmi_Display_ConnectionStatus
 * - kBrokerTopic_Hmi_Ext_ConnectionStatus
 */
struct  Broker__ConnectionStatus
{
  ProtobufCMessage base;
  protobuf_c_boolean is_connected;
};
#define BROKER__CONNECTION_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__connection_status__descriptor) \
    , 0 }


/*
 **
 * Error code status message, used for these following topics:
 * - kBrokerTopic_Hmi_Rfid_ErrorCode
 * - kBrokerTopic_Hmi_Display_ErrorCode
 * - kBrokerTopic_Hmi_Ext_ErrorCode
 * - kBrokerTopic_Hmi_App_ErrorCode
 * - kBrokerTopic_Ocpp_Connector_Status
 */
struct  Broker__Error
{
  ProtobufCMessage base;
  uint32_t error_code;
};
#define BROKER__ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__error__descriptor) \
    , 0 }


struct  Broker__RfidUid
{
  ProtobufCMessage base;
  uint32_t gun_id;
  ProtobufCBinaryData uid;
  uint32_t uid_len;
};
#define BROKER__RFID_UID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__rfid_uid__descriptor) \
    , 0, {0,NULL}, 0 }


struct  Broker__EvMac
{
  ProtobufCMessage base;
  uint32_t gun_id;
  ProtobufCBinaryData mac_addr;
};
#define BROKER__EV_MAC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__ev_mac__descriptor) \
    , 0, {0,NULL} }


struct  Broker__ScreenIdCurrent
{
  ProtobufCMessage base;
  uint32_t screen_id;
};
#define BROKER__SCREEN_ID_CURRENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__screen_id_current__descriptor) \
    , 0 }


struct  Broker__ScreenIdActive
{
  ProtobufCMessage base;
  uint32_t screen_id;
};
#define BROKER__SCREEN_ID_ACTIVE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__screen_id_active__descriptor) \
    , 0 }


struct  Broker__ModuleStatus
{
  ProtobufCMessage base;
  uint32_t gun_id;
  protobuf_c_boolean is_connected;
};
#define BROKER__MODULE_STATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__module_status__descriptor) \
    , 0, 0 }


struct  Broker__Account
{
  ProtobufCMessage base;
  uint32_t gun_id;
  char *account;
  uint32_t account_len;
};
#define BROKER__ACCOUNT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__account__descriptor) \
    , 0, NULL, 0 }


struct  Broker__BattPercent
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t batt_percent;
};
#define BROKER__BATT_PERCENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__batt_percent__descriptor) \
    , 0, 0 }


struct  Broker__Temperature
{
  ProtobufCMessage base;
  uint32_t gun_id;
  double temperature;
};
#define BROKER__TEMPERATURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__temperature__descriptor) \
    , 0, 0 }


struct  Broker__Voltage
{
  ProtobufCMessage base;
  uint32_t gun_id;
  double voltage;
};
#define BROKER__VOLTAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__voltage__descriptor) \
    , 0, 0 }


struct  Broker__Current
{
  ProtobufCMessage base;
  uint32_t gun_id;
  double current;
};
#define BROKER__CURRENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__current__descriptor) \
    , 0, 0 }


struct  Broker__RemainingTime
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t remaining_time;
};
#define BROKER__REMAINING_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__remaining_time__descriptor) \
    , 0, 0 }


struct  Broker__ChargingTime
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t charging_time;
};
#define BROKER__CHARGING_TIME__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__charging_time__descriptor) \
    , 0, 0 }


struct  Broker__ChargingPower
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t charging_power;
};
#define BROKER__CHARGING_POWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__charging_power__descriptor) \
    , 0, 0 }


struct  Broker__ChargingEnergy
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t charging_energy;
};
#define BROKER__CHARGING_ENERGY__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__charging_energy__descriptor) \
    , 0, 0 }


struct  Broker__ChargingCash
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t charging_cash;
};
#define BROKER__CHARGING_CASH__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__charging_cash__descriptor) \
    , 0, 0 }


struct  Broker__ActiveSocket
{
  ProtobufCMessage base;
  uint32_t gun_id;
  protobuf_c_boolean active_socket;
};
#define BROKER__ACTIVE_SOCKET__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__active_socket__descriptor) \
    , 0, 0 }


/*
 * Dữ liệu màn hình HMI
 */
struct  Broker__HMIStatus
{
  ProtobufCMessage base;
  uint32_t gun_id;
  Broker__ScreenStatus screen_status;
};
#define BROKER__HMISTATUS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__hmistatus__descriptor) \
    , 0, BROKER__SCREEN_STATUS__UNKNOWN }


struct  Broker__HmiErrorCodeData
{
  ProtobufCMessage base;
  uint64_t error;
};
#define BROKER__HMI_ERROR_CODE_DATA__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__hmi_error_code_data__descriptor) \
    , 0 }


struct  Broker__AuthenResult
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t authen_type;
  uint32_t ev_type;
  protobuf_c_boolean authen_ok;
};
#define BROKER__AUTHEN_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__authen_result__descriptor) \
    , 0, 0, 0, 0 }


struct  Broker__StateInfo
{
  ProtobufCMessage base;
  uint32_t gun_id;
  uint32_t state;
};
#define BROKER__STATE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__state_info__descriptor) \
    , 0, 0 }


struct  Broker__CsmsFotaTrigger
{
  ProtobufCMessage base;
  char *url;
  uint32_t url_len;
  char *file_name;
  uint32_t file_name_len;
  uint32_t app_id;
};
#define BROKER__CSMS_FOTA_TRIGGER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__csms_fota_trigger__descriptor) \
    , NULL, 0, NULL, 0, 0 }


struct  Broker__Post__MAIN
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum ddr;
  Broker__StatusEnum emmc;
  Broker__StatusEnum i2c;
  Broker__StatusEnum can0;
  Broker__StatusEnum can1;
  Broker__StatusEnum eth0;
  Broker__StatusEnum eth1;
  Broker__StatusEnum usb;
};
#define BROKER__POST__MAIN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__main__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__PLCIMX
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum ddr;
  Broker__StatusEnum emmc;
  Broker__StatusEnum i2c;
  Broker__StatusEnum can;
  Broker__StatusEnum eth;
};
#define BROKER__POST__PLC__IMX__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__plc__imx__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__FAN
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  size_t n_fanstatus;
  Broker__StatusEnum *fanstatus;
  Broker__StatusEnum allfanstatus;
  Broker__StatusEnum hightempstatus;
  Broker__StatusEnum temp0sensor;
  Broker__StatusEnum temp1sensor;
  Broker__StatusEnum temp2sensor;
  Broker__StatusEnum canconnectstatus;
};
#define BROKER__POST__FAN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__fan__descriptor) \
    , NULL, NULL, NULL, 0,NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__IO
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum flashstatus;
  Broker__StatusEnum canconnectstatus;
  size_t n_meterconnectstatus;
  Broker__StatusEnum *meterconnectstatus;
  Broker__StatusEnum doorstatus;
  Broker__StatusEnum emergencybtnstatus;
  Broker__StatusEnum spdstatus;
};
#define BROKER__POST__IO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__io__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, 0,NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__HV
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum acrelaystatus;
  Broker__StatusEnum inputovervoltage;
  Broker__StatusEnum inputundervoltage;
  Broker__StatusEnum output0status;
  Broker__StatusEnum output1status;
  Broker__StatusEnum output0hvrelay;
  Broker__StatusEnum output0lvrelay;
  Broker__StatusEnum output1hvrelay;
  Broker__StatusEnum output1lvrelay;
  Broker__StatusEnum parallelhvrelay;
  Broker__StatusEnum parallellvrelay;
  Broker__StatusEnum flashstatus;
  Broker__StatusEnum canconnectstatus;
};
#define BROKER__POST__HV__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__hv__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__RFID
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum transceiverstatus;
};
#define BROKER__POST__RFID__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__rfid__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK }


struct  Broker__Post__PLCXMC
{
  ProtobufCMessage base;
  char *swversion;
  char *hwversion;
  char *serialno;
  Broker__StatusEnum canconnectstatus;
  Broker__StatusEnum adcpwmstatus;
};
#define BROKER__POST__PLC__XMC__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__plc__xmc__descriptor) \
    , NULL, NULL, NULL, BROKER__STATUS_ENUM__OK, BROKER__STATUS_ENUM__OK }


struct  Broker__Post
{
  ProtobufCMessage base;
  Broker__Post__MAIN *main;
  size_t n_plc_imx;
  Broker__Post__PLCIMX **plc_imx;
  Broker__Post__FAN *fan;
  Broker__Post__IO *io;
  Broker__Post__HV *hv;
  Broker__Post__RFID *rfid;
  size_t n_plc_xmc;
  Broker__Post__PLCXMC **plc_xmc;
};
#define BROKER__POST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__post__descriptor) \
    , NULL, 0,NULL, NULL, NULL, NULL, NULL, 0,NULL }


struct  Broker__SystemOpMode
{
  ProtobufCMessage base;
  uint32_t op_mode;
};
#define BROKER__SYSTEM_OP_MODE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__system_op_mode__descriptor) \
    , 0 }


struct  Broker__FastChargeInfo
{
  ProtobufCMessage base;
  uint32_t gun_id;
  protobuf_c_boolean is_enabled;
};
#define BROKER__FAST_CHARGE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__fast_charge_info__descriptor) \
    , 0, 0 }


struct  Broker__ChargingReport
{
  ProtobufCMessage base;
  uint64_t gun_id;
  protobuf_c_boolean result;
  char *ev_mac;
  uint64_t time;
  double power_val;
  uint64_t power_mul;
};
#define BROKER__CHARGING_REPORT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__charging_report__descriptor) \
    , 0, 0, NULL, 0, 0, 0 }


struct  Broker__GunError
{
  ProtobufCMessage base;
  uint32_t gun_id;
  protobuf_c_boolean gun_error;
  protobuf_c_boolean station_error;
};
#define BROKER__GUN_ERROR__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__gun_error__descriptor) \
    , 0, 0, 0 }


struct  Broker__RecoverInfo
{
  ProtobufCMessage base;
  uint32_t gun_id;
  protobuf_c_boolean is_recover_passed;
};
#define BROKER__RECOVER_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&broker__recover_info__descriptor) \
    , 0, 0 }


/* Broker__ConnectionStatus methods */
void   broker__connection_status__init
                     (Broker__ConnectionStatus         *message);
size_t broker__connection_status__get_packed_size
                     (const Broker__ConnectionStatus   *message);
size_t broker__connection_status__pack
                     (const Broker__ConnectionStatus   *message,
                      uint8_t             *out);
size_t broker__connection_status__pack_to_buffer
                     (const Broker__ConnectionStatus   *message,
                      ProtobufCBuffer     *buffer);
Broker__ConnectionStatus *
       broker__connection_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__connection_status__free_unpacked
                     (Broker__ConnectionStatus *message,
                      ProtobufCAllocator *allocator);
/* Broker__Error methods */
void   broker__error__init
                     (Broker__Error         *message);
size_t broker__error__get_packed_size
                     (const Broker__Error   *message);
size_t broker__error__pack
                     (const Broker__Error   *message,
                      uint8_t             *out);
size_t broker__error__pack_to_buffer
                     (const Broker__Error   *message,
                      ProtobufCBuffer     *buffer);
Broker__Error *
       broker__error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__error__free_unpacked
                     (Broker__Error *message,
                      ProtobufCAllocator *allocator);
/* Broker__RfidUid methods */
void   broker__rfid_uid__init
                     (Broker__RfidUid         *message);
size_t broker__rfid_uid__get_packed_size
                     (const Broker__RfidUid   *message);
size_t broker__rfid_uid__pack
                     (const Broker__RfidUid   *message,
                      uint8_t             *out);
size_t broker__rfid_uid__pack_to_buffer
                     (const Broker__RfidUid   *message,
                      ProtobufCBuffer     *buffer);
Broker__RfidUid *
       broker__rfid_uid__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__rfid_uid__free_unpacked
                     (Broker__RfidUid *message,
                      ProtobufCAllocator *allocator);
/* Broker__EvMac methods */
void   broker__ev_mac__init
                     (Broker__EvMac         *message);
size_t broker__ev_mac__get_packed_size
                     (const Broker__EvMac   *message);
size_t broker__ev_mac__pack
                     (const Broker__EvMac   *message,
                      uint8_t             *out);
size_t broker__ev_mac__pack_to_buffer
                     (const Broker__EvMac   *message,
                      ProtobufCBuffer     *buffer);
Broker__EvMac *
       broker__ev_mac__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__ev_mac__free_unpacked
                     (Broker__EvMac *message,
                      ProtobufCAllocator *allocator);
/* Broker__ScreenIdCurrent methods */
void   broker__screen_id_current__init
                     (Broker__ScreenIdCurrent         *message);
size_t broker__screen_id_current__get_packed_size
                     (const Broker__ScreenIdCurrent   *message);
size_t broker__screen_id_current__pack
                     (const Broker__ScreenIdCurrent   *message,
                      uint8_t             *out);
size_t broker__screen_id_current__pack_to_buffer
                     (const Broker__ScreenIdCurrent   *message,
                      ProtobufCBuffer     *buffer);
Broker__ScreenIdCurrent *
       broker__screen_id_current__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__screen_id_current__free_unpacked
                     (Broker__ScreenIdCurrent *message,
                      ProtobufCAllocator *allocator);
/* Broker__ScreenIdActive methods */
void   broker__screen_id_active__init
                     (Broker__ScreenIdActive         *message);
size_t broker__screen_id_active__get_packed_size
                     (const Broker__ScreenIdActive   *message);
size_t broker__screen_id_active__pack
                     (const Broker__ScreenIdActive   *message,
                      uint8_t             *out);
size_t broker__screen_id_active__pack_to_buffer
                     (const Broker__ScreenIdActive   *message,
                      ProtobufCBuffer     *buffer);
Broker__ScreenIdActive *
       broker__screen_id_active__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__screen_id_active__free_unpacked
                     (Broker__ScreenIdActive *message,
                      ProtobufCAllocator *allocator);
/* Broker__ModuleStatus methods */
void   broker__module_status__init
                     (Broker__ModuleStatus         *message);
size_t broker__module_status__get_packed_size
                     (const Broker__ModuleStatus   *message);
size_t broker__module_status__pack
                     (const Broker__ModuleStatus   *message,
                      uint8_t             *out);
size_t broker__module_status__pack_to_buffer
                     (const Broker__ModuleStatus   *message,
                      ProtobufCBuffer     *buffer);
Broker__ModuleStatus *
       broker__module_status__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__module_status__free_unpacked
                     (Broker__ModuleStatus *message,
                      ProtobufCAllocator *allocator);
/* Broker__Account methods */
void   broker__account__init
                     (Broker__Account         *message);
size_t broker__account__get_packed_size
                     (const Broker__Account   *message);
size_t broker__account__pack
                     (const Broker__Account   *message,
                      uint8_t             *out);
size_t broker__account__pack_to_buffer
                     (const Broker__Account   *message,
                      ProtobufCBuffer     *buffer);
Broker__Account *
       broker__account__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__account__free_unpacked
                     (Broker__Account *message,
                      ProtobufCAllocator *allocator);
/* Broker__BattPercent methods */
void   broker__batt_percent__init
                     (Broker__BattPercent         *message);
size_t broker__batt_percent__get_packed_size
                     (const Broker__BattPercent   *message);
size_t broker__batt_percent__pack
                     (const Broker__BattPercent   *message,
                      uint8_t             *out);
size_t broker__batt_percent__pack_to_buffer
                     (const Broker__BattPercent   *message,
                      ProtobufCBuffer     *buffer);
Broker__BattPercent *
       broker__batt_percent__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__batt_percent__free_unpacked
                     (Broker__BattPercent *message,
                      ProtobufCAllocator *allocator);
/* Broker__Temperature methods */
void   broker__temperature__init
                     (Broker__Temperature         *message);
size_t broker__temperature__get_packed_size
                     (const Broker__Temperature   *message);
size_t broker__temperature__pack
                     (const Broker__Temperature   *message,
                      uint8_t             *out);
size_t broker__temperature__pack_to_buffer
                     (const Broker__Temperature   *message,
                      ProtobufCBuffer     *buffer);
Broker__Temperature *
       broker__temperature__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__temperature__free_unpacked
                     (Broker__Temperature *message,
                      ProtobufCAllocator *allocator);
/* Broker__Voltage methods */
void   broker__voltage__init
                     (Broker__Voltage         *message);
size_t broker__voltage__get_packed_size
                     (const Broker__Voltage   *message);
size_t broker__voltage__pack
                     (const Broker__Voltage   *message,
                      uint8_t             *out);
size_t broker__voltage__pack_to_buffer
                     (const Broker__Voltage   *message,
                      ProtobufCBuffer     *buffer);
Broker__Voltage *
       broker__voltage__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__voltage__free_unpacked
                     (Broker__Voltage *message,
                      ProtobufCAllocator *allocator);
/* Broker__Current methods */
void   broker__current__init
                     (Broker__Current         *message);
size_t broker__current__get_packed_size
                     (const Broker__Current   *message);
size_t broker__current__pack
                     (const Broker__Current   *message,
                      uint8_t             *out);
size_t broker__current__pack_to_buffer
                     (const Broker__Current   *message,
                      ProtobufCBuffer     *buffer);
Broker__Current *
       broker__current__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__current__free_unpacked
                     (Broker__Current *message,
                      ProtobufCAllocator *allocator);
/* Broker__RemainingTime methods */
void   broker__remaining_time__init
                     (Broker__RemainingTime         *message);
size_t broker__remaining_time__get_packed_size
                     (const Broker__RemainingTime   *message);
size_t broker__remaining_time__pack
                     (const Broker__RemainingTime   *message,
                      uint8_t             *out);
size_t broker__remaining_time__pack_to_buffer
                     (const Broker__RemainingTime   *message,
                      ProtobufCBuffer     *buffer);
Broker__RemainingTime *
       broker__remaining_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__remaining_time__free_unpacked
                     (Broker__RemainingTime *message,
                      ProtobufCAllocator *allocator);
/* Broker__ChargingTime methods */
void   broker__charging_time__init
                     (Broker__ChargingTime         *message);
size_t broker__charging_time__get_packed_size
                     (const Broker__ChargingTime   *message);
size_t broker__charging_time__pack
                     (const Broker__ChargingTime   *message,
                      uint8_t             *out);
size_t broker__charging_time__pack_to_buffer
                     (const Broker__ChargingTime   *message,
                      ProtobufCBuffer     *buffer);
Broker__ChargingTime *
       broker__charging_time__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__charging_time__free_unpacked
                     (Broker__ChargingTime *message,
                      ProtobufCAllocator *allocator);
/* Broker__ChargingPower methods */
void   broker__charging_power__init
                     (Broker__ChargingPower         *message);
size_t broker__charging_power__get_packed_size
                     (const Broker__ChargingPower   *message);
size_t broker__charging_power__pack
                     (const Broker__ChargingPower   *message,
                      uint8_t             *out);
size_t broker__charging_power__pack_to_buffer
                     (const Broker__ChargingPower   *message,
                      ProtobufCBuffer     *buffer);
Broker__ChargingPower *
       broker__charging_power__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__charging_power__free_unpacked
                     (Broker__ChargingPower *message,
                      ProtobufCAllocator *allocator);
/* Broker__ChargingEnergy methods */
void   broker__charging_energy__init
                     (Broker__ChargingEnergy         *message);
size_t broker__charging_energy__get_packed_size
                     (const Broker__ChargingEnergy   *message);
size_t broker__charging_energy__pack
                     (const Broker__ChargingEnergy   *message,
                      uint8_t             *out);
size_t broker__charging_energy__pack_to_buffer
                     (const Broker__ChargingEnergy   *message,
                      ProtobufCBuffer     *buffer);
Broker__ChargingEnergy *
       broker__charging_energy__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__charging_energy__free_unpacked
                     (Broker__ChargingEnergy *message,
                      ProtobufCAllocator *allocator);
/* Broker__ChargingCash methods */
void   broker__charging_cash__init
                     (Broker__ChargingCash         *message);
size_t broker__charging_cash__get_packed_size
                     (const Broker__ChargingCash   *message);
size_t broker__charging_cash__pack
                     (const Broker__ChargingCash   *message,
                      uint8_t             *out);
size_t broker__charging_cash__pack_to_buffer
                     (const Broker__ChargingCash   *message,
                      ProtobufCBuffer     *buffer);
Broker__ChargingCash *
       broker__charging_cash__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__charging_cash__free_unpacked
                     (Broker__ChargingCash *message,
                      ProtobufCAllocator *allocator);
/* Broker__ActiveSocket methods */
void   broker__active_socket__init
                     (Broker__ActiveSocket         *message);
size_t broker__active_socket__get_packed_size
                     (const Broker__ActiveSocket   *message);
size_t broker__active_socket__pack
                     (const Broker__ActiveSocket   *message,
                      uint8_t             *out);
size_t broker__active_socket__pack_to_buffer
                     (const Broker__ActiveSocket   *message,
                      ProtobufCBuffer     *buffer);
Broker__ActiveSocket *
       broker__active_socket__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__active_socket__free_unpacked
                     (Broker__ActiveSocket *message,
                      ProtobufCAllocator *allocator);
/* Broker__HMIStatus methods */
void   broker__hmistatus__init
                     (Broker__HMIStatus         *message);
size_t broker__hmistatus__get_packed_size
                     (const Broker__HMIStatus   *message);
size_t broker__hmistatus__pack
                     (const Broker__HMIStatus   *message,
                      uint8_t             *out);
size_t broker__hmistatus__pack_to_buffer
                     (const Broker__HMIStatus   *message,
                      ProtobufCBuffer     *buffer);
Broker__HMIStatus *
       broker__hmistatus__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__hmistatus__free_unpacked
                     (Broker__HMIStatus *message,
                      ProtobufCAllocator *allocator);
/* Broker__HmiErrorCodeData methods */
void   broker__hmi_error_code_data__init
                     (Broker__HmiErrorCodeData         *message);
size_t broker__hmi_error_code_data__get_packed_size
                     (const Broker__HmiErrorCodeData   *message);
size_t broker__hmi_error_code_data__pack
                     (const Broker__HmiErrorCodeData   *message,
                      uint8_t             *out);
size_t broker__hmi_error_code_data__pack_to_buffer
                     (const Broker__HmiErrorCodeData   *message,
                      ProtobufCBuffer     *buffer);
Broker__HmiErrorCodeData *
       broker__hmi_error_code_data__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__hmi_error_code_data__free_unpacked
                     (Broker__HmiErrorCodeData *message,
                      ProtobufCAllocator *allocator);
/* Broker__AuthenResult methods */
void   broker__authen_result__init
                     (Broker__AuthenResult         *message);
size_t broker__authen_result__get_packed_size
                     (const Broker__AuthenResult   *message);
size_t broker__authen_result__pack
                     (const Broker__AuthenResult   *message,
                      uint8_t             *out);
size_t broker__authen_result__pack_to_buffer
                     (const Broker__AuthenResult   *message,
                      ProtobufCBuffer     *buffer);
Broker__AuthenResult *
       broker__authen_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__authen_result__free_unpacked
                     (Broker__AuthenResult *message,
                      ProtobufCAllocator *allocator);
/* Broker__StateInfo methods */
void   broker__state_info__init
                     (Broker__StateInfo         *message);
size_t broker__state_info__get_packed_size
                     (const Broker__StateInfo   *message);
size_t broker__state_info__pack
                     (const Broker__StateInfo   *message,
                      uint8_t             *out);
size_t broker__state_info__pack_to_buffer
                     (const Broker__StateInfo   *message,
                      ProtobufCBuffer     *buffer);
Broker__StateInfo *
       broker__state_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__state_info__free_unpacked
                     (Broker__StateInfo *message,
                      ProtobufCAllocator *allocator);
/* Broker__CsmsFotaTrigger methods */
void   broker__csms_fota_trigger__init
                     (Broker__CsmsFotaTrigger         *message);
size_t broker__csms_fota_trigger__get_packed_size
                     (const Broker__CsmsFotaTrigger   *message);
size_t broker__csms_fota_trigger__pack
                     (const Broker__CsmsFotaTrigger   *message,
                      uint8_t             *out);
size_t broker__csms_fota_trigger__pack_to_buffer
                     (const Broker__CsmsFotaTrigger   *message,
                      ProtobufCBuffer     *buffer);
Broker__CsmsFotaTrigger *
       broker__csms_fota_trigger__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__csms_fota_trigger__free_unpacked
                     (Broker__CsmsFotaTrigger *message,
                      ProtobufCAllocator *allocator);
/* Broker__Post__MAIN methods */
void   broker__post__main__init
                     (Broker__Post__MAIN         *message);
/* Broker__Post__PLCIMX methods */
void   broker__post__plc__imx__init
                     (Broker__Post__PLCIMX         *message);
/* Broker__Post__FAN methods */
void   broker__post__fan__init
                     (Broker__Post__FAN         *message);
/* Broker__Post__IO methods */
void   broker__post__io__init
                     (Broker__Post__IO         *message);
/* Broker__Post__HV methods */
void   broker__post__hv__init
                     (Broker__Post__HV         *message);
/* Broker__Post__RFID methods */
void   broker__post__rfid__init
                     (Broker__Post__RFID         *message);
/* Broker__Post__PLCXMC methods */
void   broker__post__plc__xmc__init
                     (Broker__Post__PLCXMC         *message);
/* Broker__Post methods */
void   broker__post__init
                     (Broker__Post         *message);
size_t broker__post__get_packed_size
                     (const Broker__Post   *message);
size_t broker__post__pack
                     (const Broker__Post   *message,
                      uint8_t             *out);
size_t broker__post__pack_to_buffer
                     (const Broker__Post   *message,
                      ProtobufCBuffer     *buffer);
Broker__Post *
       broker__post__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__post__free_unpacked
                     (Broker__Post *message,
                      ProtobufCAllocator *allocator);
/* Broker__SystemOpMode methods */
void   broker__system_op_mode__init
                     (Broker__SystemOpMode         *message);
size_t broker__system_op_mode__get_packed_size
                     (const Broker__SystemOpMode   *message);
size_t broker__system_op_mode__pack
                     (const Broker__SystemOpMode   *message,
                      uint8_t             *out);
size_t broker__system_op_mode__pack_to_buffer
                     (const Broker__SystemOpMode   *message,
                      ProtobufCBuffer     *buffer);
Broker__SystemOpMode *
       broker__system_op_mode__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__system_op_mode__free_unpacked
                     (Broker__SystemOpMode *message,
                      ProtobufCAllocator *allocator);
/* Broker__FastChargeInfo methods */
void   broker__fast_charge_info__init
                     (Broker__FastChargeInfo         *message);
size_t broker__fast_charge_info__get_packed_size
                     (const Broker__FastChargeInfo   *message);
size_t broker__fast_charge_info__pack
                     (const Broker__FastChargeInfo   *message,
                      uint8_t             *out);
size_t broker__fast_charge_info__pack_to_buffer
                     (const Broker__FastChargeInfo   *message,
                      ProtobufCBuffer     *buffer);
Broker__FastChargeInfo *
       broker__fast_charge_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__fast_charge_info__free_unpacked
                     (Broker__FastChargeInfo *message,
                      ProtobufCAllocator *allocator);
/* Broker__ChargingReport methods */
void   broker__charging_report__init
                     (Broker__ChargingReport         *message);
size_t broker__charging_report__get_packed_size
                     (const Broker__ChargingReport   *message);
size_t broker__charging_report__pack
                     (const Broker__ChargingReport   *message,
                      uint8_t             *out);
size_t broker__charging_report__pack_to_buffer
                     (const Broker__ChargingReport   *message,
                      ProtobufCBuffer     *buffer);
Broker__ChargingReport *
       broker__charging_report__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__charging_report__free_unpacked
                     (Broker__ChargingReport *message,
                      ProtobufCAllocator *allocator);
/* Broker__GunError methods */
void   broker__gun_error__init
                     (Broker__GunError         *message);
size_t broker__gun_error__get_packed_size
                     (const Broker__GunError   *message);
size_t broker__gun_error__pack
                     (const Broker__GunError   *message,
                      uint8_t             *out);
size_t broker__gun_error__pack_to_buffer
                     (const Broker__GunError   *message,
                      ProtobufCBuffer     *buffer);
Broker__GunError *
       broker__gun_error__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__gun_error__free_unpacked
                     (Broker__GunError *message,
                      ProtobufCAllocator *allocator);
/* Broker__RecoverInfo methods */
void   broker__recover_info__init
                     (Broker__RecoverInfo         *message);
size_t broker__recover_info__get_packed_size
                     (const Broker__RecoverInfo   *message);
size_t broker__recover_info__pack
                     (const Broker__RecoverInfo   *message,
                      uint8_t             *out);
size_t broker__recover_info__pack_to_buffer
                     (const Broker__RecoverInfo   *message,
                      ProtobufCBuffer     *buffer);
Broker__RecoverInfo *
       broker__recover_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   broker__recover_info__free_unpacked
                     (Broker__RecoverInfo *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Broker__ConnectionStatus_Closure)
                 (const Broker__ConnectionStatus *message,
                  void *closure_data);
typedef void (*Broker__Error_Closure)
                 (const Broker__Error *message,
                  void *closure_data);
typedef void (*Broker__RfidUid_Closure)
                 (const Broker__RfidUid *message,
                  void *closure_data);
typedef void (*Broker__EvMac_Closure)
                 (const Broker__EvMac *message,
                  void *closure_data);
typedef void (*Broker__ScreenIdCurrent_Closure)
                 (const Broker__ScreenIdCurrent *message,
                  void *closure_data);
typedef void (*Broker__ScreenIdActive_Closure)
                 (const Broker__ScreenIdActive *message,
                  void *closure_data);
typedef void (*Broker__ModuleStatus_Closure)
                 (const Broker__ModuleStatus *message,
                  void *closure_data);
typedef void (*Broker__Account_Closure)
                 (const Broker__Account *message,
                  void *closure_data);
typedef void (*Broker__BattPercent_Closure)
                 (const Broker__BattPercent *message,
                  void *closure_data);
typedef void (*Broker__Temperature_Closure)
                 (const Broker__Temperature *message,
                  void *closure_data);
typedef void (*Broker__Voltage_Closure)
                 (const Broker__Voltage *message,
                  void *closure_data);
typedef void (*Broker__Current_Closure)
                 (const Broker__Current *message,
                  void *closure_data);
typedef void (*Broker__RemainingTime_Closure)
                 (const Broker__RemainingTime *message,
                  void *closure_data);
typedef void (*Broker__ChargingTime_Closure)
                 (const Broker__ChargingTime *message,
                  void *closure_data);
typedef void (*Broker__ChargingPower_Closure)
                 (const Broker__ChargingPower *message,
                  void *closure_data);
typedef void (*Broker__ChargingEnergy_Closure)
                 (const Broker__ChargingEnergy *message,
                  void *closure_data);
typedef void (*Broker__ChargingCash_Closure)
                 (const Broker__ChargingCash *message,
                  void *closure_data);
typedef void (*Broker__ActiveSocket_Closure)
                 (const Broker__ActiveSocket *message,
                  void *closure_data);
typedef void (*Broker__HMIStatus_Closure)
                 (const Broker__HMIStatus *message,
                  void *closure_data);
typedef void (*Broker__HmiErrorCodeData_Closure)
                 (const Broker__HmiErrorCodeData *message,
                  void *closure_data);
typedef void (*Broker__AuthenResult_Closure)
                 (const Broker__AuthenResult *message,
                  void *closure_data);
typedef void (*Broker__StateInfo_Closure)
                 (const Broker__StateInfo *message,
                  void *closure_data);
typedef void (*Broker__CsmsFotaTrigger_Closure)
                 (const Broker__CsmsFotaTrigger *message,
                  void *closure_data);
typedef void (*Broker__Post__MAIN_Closure)
                 (const Broker__Post__MAIN *message,
                  void *closure_data);
typedef void (*Broker__Post__PLCIMX_Closure)
                 (const Broker__Post__PLCIMX *message,
                  void *closure_data);
typedef void (*Broker__Post__FAN_Closure)
                 (const Broker__Post__FAN *message,
                  void *closure_data);
typedef void (*Broker__Post__IO_Closure)
                 (const Broker__Post__IO *message,
                  void *closure_data);
typedef void (*Broker__Post__HV_Closure)
                 (const Broker__Post__HV *message,
                  void *closure_data);
typedef void (*Broker__Post__RFID_Closure)
                 (const Broker__Post__RFID *message,
                  void *closure_data);
typedef void (*Broker__Post__PLCXMC_Closure)
                 (const Broker__Post__PLCXMC *message,
                  void *closure_data);
typedef void (*Broker__Post_Closure)
                 (const Broker__Post *message,
                  void *closure_data);
typedef void (*Broker__SystemOpMode_Closure)
                 (const Broker__SystemOpMode *message,
                  void *closure_data);
typedef void (*Broker__FastChargeInfo_Closure)
                 (const Broker__FastChargeInfo *message,
                  void *closure_data);
typedef void (*Broker__ChargingReport_Closure)
                 (const Broker__ChargingReport *message,
                  void *closure_data);
typedef void (*Broker__GunError_Closure)
                 (const Broker__GunError *message,
                  void *closure_data);
typedef void (*Broker__RecoverInfo_Closure)
                 (const Broker__RecoverInfo *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    broker__screen_status__descriptor;
extern const ProtobufCEnumDescriptor    broker__pilot_states__descriptor;
extern const ProtobufCEnumDescriptor    broker__status_enum__descriptor;
extern const ProtobufCMessageDescriptor broker__connection_status__descriptor;
extern const ProtobufCMessageDescriptor broker__error__descriptor;
extern const ProtobufCMessageDescriptor broker__rfid_uid__descriptor;
extern const ProtobufCMessageDescriptor broker__ev_mac__descriptor;
extern const ProtobufCMessageDescriptor broker__screen_id_current__descriptor;
extern const ProtobufCMessageDescriptor broker__screen_id_active__descriptor;
extern const ProtobufCMessageDescriptor broker__module_status__descriptor;
extern const ProtobufCMessageDescriptor broker__account__descriptor;
extern const ProtobufCMessageDescriptor broker__batt_percent__descriptor;
extern const ProtobufCMessageDescriptor broker__temperature__descriptor;
extern const ProtobufCMessageDescriptor broker__voltage__descriptor;
extern const ProtobufCMessageDescriptor broker__current__descriptor;
extern const ProtobufCMessageDescriptor broker__remaining_time__descriptor;
extern const ProtobufCMessageDescriptor broker__charging_time__descriptor;
extern const ProtobufCMessageDescriptor broker__charging_power__descriptor;
extern const ProtobufCMessageDescriptor broker__charging_energy__descriptor;
extern const ProtobufCMessageDescriptor broker__charging_cash__descriptor;
extern const ProtobufCMessageDescriptor broker__active_socket__descriptor;
extern const ProtobufCMessageDescriptor broker__hmistatus__descriptor;
extern const ProtobufCMessageDescriptor broker__hmi_error_code_data__descriptor;
extern const ProtobufCMessageDescriptor broker__authen_result__descriptor;
extern const ProtobufCMessageDescriptor broker__state_info__descriptor;
extern const ProtobufCMessageDescriptor broker__csms_fota_trigger__descriptor;
extern const ProtobufCMessageDescriptor broker__post__descriptor;
extern const ProtobufCMessageDescriptor broker__post__main__descriptor;
extern const ProtobufCMessageDescriptor broker__post__plc__imx__descriptor;
extern const ProtobufCMessageDescriptor broker__post__fan__descriptor;
extern const ProtobufCMessageDescriptor broker__post__io__descriptor;
extern const ProtobufCMessageDescriptor broker__post__hv__descriptor;
extern const ProtobufCMessageDescriptor broker__post__rfid__descriptor;
extern const ProtobufCMessageDescriptor broker__post__plc__xmc__descriptor;
extern const ProtobufCMessageDescriptor broker__system_op_mode__descriptor;
extern const ProtobufCMessageDescriptor broker__fast_charge_info__descriptor;
extern const ProtobufCMessageDescriptor broker__charging_report__descriptor;
extern const ProtobufCMessageDescriptor broker__gun_error__descriptor;
extern const ProtobufCMessageDescriptor broker__recover_info__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_hmi_5fmessages_2eproto__INCLUDED */
